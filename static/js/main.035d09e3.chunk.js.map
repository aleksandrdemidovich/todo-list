{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","tasks","type","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","getTodolistsThunk","todos","App","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","action","removeTodolistAC","changeTodolistTitleAC","updateTodolistTitleTC","addTodolist","todolist","addTodolistTC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todoListId","todolistTasks","newTasksArray","copyState","forEach","newTodolist","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHAqDYA,EAOAC,E,yFCnDCC,EAAcC,IAAMC,MAAK,SAAUC,GAC5CC,QAAQC,IAAI,sBAEZ,MAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAwBF,mBAAwB,MAAhD,mBAAKG,EAAL,KAAYC,EAAZ,KAEMC,EAAU,WACS,KAAjBJ,EAAMK,QACNT,EAAMQ,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRL,QAASA,EACTM,MAAOR,EACPS,SAjBS,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYb,IAEvB,cAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,YCvCCC,EAAe1B,IAAMC,MAAK,SAAUC,GAC7CC,QAAQC,IAAI,uBACZ,MAA8BC,oBAAS,GAAvC,mBAAKsB,EAAL,KAAeC,EAAf,KACA,EAAwBvB,mBAASH,EAAMY,OAAvC,mBAAKR,EAAL,KAAYC,EAAZ,KAcA,OAAOoB,EACD,cAACf,EAAA,EAAD,CAAWE,MAAOR,EAAOS,SALX,SAACC,GACjBT,EAASS,EAAEC,cAAcH,QAIyBe,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZ1B,EAAMa,SAAST,MAQb,sBAAMyB,cAda,WACrBH,GAAY,GACZrB,EAASL,EAAMY,QAYb,SAAwCZ,EAAMY,W,mCFzBlDkB,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAIThC,GACX,OAAO0B,EAASQ,KAA6E,aAAc,CAAClC,WALvGgC,EAAe,SAOTG,GACX,OAAOT,EAASU,OAAT,qBAA4CD,KAR9CH,EAAe,SAUTG,EAAYnC,GACvB,OAAO0B,EAASW,IAAT,qBAA2EF,GAAM,CAACnC,WAXpFgC,EAAe,SAafM,GACL,OAAOZ,EAASO,IAAT,qBAA6CK,EAA7C,YAdFN,EAAe,SAgBbM,EAAoBC,GAC3B,OAAOb,EAASU,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlEP,EAAe,SAmBbM,EAAoBtC,GAC3B,OAAO0B,EAASQ,KAAT,qBAAgGI,EAAhG,UAAoH,CAACtC,WApBvHgC,EAAe,SAsBbM,EAAoBC,EAAgBC,GAC3C,OAAOd,EAASW,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,K,SAmBlIjD,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KG9CL,IAAMiD,EAAO/C,IAAMC,MAAK,SAACC,GAC5B,IAAM8C,EAAiBC,uBAAY,kBAAM/C,EAAMgD,WAAWhD,EAAMiD,KAAKV,GAAIvC,EAAM0C,cAAa,CAAC1C,EAAMiD,KAAKV,GAAIvC,EAAM0C,aAE5GQ,EAAkBH,uBAAY,SAACjC,GACjC,IAAIqC,EAAiBrC,EAAEC,cAAcqC,QACrCpD,EAAMqD,iBAAiBrD,EAAMiD,KAAKV,GAAIY,EAAiBxD,EAAa2D,UAAY3D,EAAa4D,IAAKvD,EAAM0C,cACzG,CAAC1C,EAAMiD,KAAKV,GAAIvC,EAAM0C,aAEnBc,EAAuBT,uBAAY,SAACU,GACtCzD,EAAM0D,gBAAgB1D,EAAMiD,KAAKV,GAAIkB,EAAUzD,EAAM0C,cACtD,CAAC1C,EAAMiD,KAAKV,GAAIvC,EAAM0C,aAEzB,OAAO,sBAAyBiB,UAAW3D,EAAMiD,KAAKW,SAAWjE,EAAa2D,UAAY,UAAY,GAA/F,UACH,cAACO,EAAA,EAAD,CACIT,QAASpD,EAAMiD,KAAKW,SAAWjE,EAAa2D,UAC5CjC,MAAM,UACNR,SAAUqC,IAGd,cAAC1B,EAAD,CAAcZ,MAAOZ,EAAMiD,KAAK7C,MAAOS,SAAU2C,IACjD,cAACpC,EAAA,EAAD,CAAYE,QAASwB,EAArB,SACI,cAACgB,EAAA,EAAD,QATS9D,EAAMiD,KAAKV,O,+BCgB1BwB,EAA+B,GCfxBC,EAAWlE,IAAMC,MAAK,SAAUC,GAEzC,IAAMiE,EAAWC,cAEjBC,qBAAU,WD+FY,IAACzB,EC9FnBuB,GD8FmBvB,EC9FC1C,EAAMuC,GD+FvB,SAAC0B,GACJ7B,EAAsBM,GACjB0B,MAAK,SAACC,GACHJ,EAVU,SAACK,EAAwB5B,GAC/C,MAAO,CAAC6B,KAAM,YAAaD,QAAO5B,cASb8B,CAAWH,EAAII,KAAKC,MAAOhC,YCjG9C,IAEFzC,QAAQC,IAAI,mBAEZ,IAAMyE,EAAU5B,uBAAY,SAAC3C,GACzBJ,EAAM2E,QAAQvE,EAAOJ,EAAMuC,MAC5B,CAACvC,EAAM2E,QAAS3E,EAAMuC,KAKnBqC,EAAsB7B,uBAAY,SAAC3C,GACrCJ,EAAM4E,oBAAoB5E,EAAMuC,GAAInC,KACrC,CAACJ,EAAMuC,GAAIvC,EAAM4E,sBAEdC,EAAoB9B,uBAAY,kBAAM/C,EAAM8E,aAAa,MAAO9E,EAAMuC,MAAK,CAACvC,EAAMuC,GAAIvC,EAAM8E,eAC5FC,EAAuBhC,uBAAY,kBAAM/C,EAAM8E,aAAa,SAAU9E,EAAMuC,MAAK,CAACvC,EAAMuC,GAAIvC,EAAM8E,eAClGE,EAA0BjC,uBAAY,kBAAM/C,EAAM8E,aAAa,YAAa9E,EAAMuC,MAAK,CAACvC,EAAMuC,GAAIvC,EAAM8E,eAG1GG,EAAmBjF,EAAMsE,MAS7B,MAPqB,WAAjBtE,EAAMkF,SACND,EAAmBjF,EAAMsE,MAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAEvB,SAAWjE,EAAa4D,QAEpD,cAAjBvD,EAAMkF,SACND,EAAmBjF,EAAMsE,MAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAEvB,SAAWjE,EAAa2D,cAGlE,gCACH,+BAAI,cAAC9B,EAAD,CAAcZ,MAAOZ,EAAMI,MAAOS,SAAU+D,IAC5C,cAACxD,EAAA,EAAD,CAAYE,QAvBG,WACnBtB,EAAMoF,eAAepF,EAAMuC,KAsBvB,SACI,cAACuB,EAAA,EAAD,SAGR,cAACjE,EAAD,CAAaW,QAASmE,IACtB,8BAEQM,EAAiBI,KAAI,SAAAF,GAAC,OAAI,cAACtC,EAAD,CAAiBI,KAAMkC,EAAGzC,WAAY1C,EAAMuC,GAC5CS,WAAYhD,EAAMgD,WAClBU,gBAAiB1D,EAAM0D,gBACvBL,iBAAkBrD,EAAMqD,kBAHb8B,EAAE5C,SAO/C,sBAAK+C,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQ7E,QAA0B,QAAjBX,EAAMkF,OAAmB,WAAa,OAC/C5D,QAASuD,EACTxD,MAAO,UAFf,iBAKA,cAACmE,EAAA,EAAD,CAAQ7E,QAA0B,WAAjBX,EAAMkF,OAAsB,WAAa,OAClD5D,QAASyD,EACT1D,MAAO,UAFf,oBAIA,cAACmE,EAAA,EAAD,CAAQ7E,QAA0B,cAAjBX,EAAMkF,OAAyB,WAAa,OACrD5D,QAAS0D,EACT3D,MAAO,YAFf,gC,+DCxDN0C,EAA0C,GAkEnC0B,EAAoB,SAACxB,GAC9B7B,IACKgC,MAAK,SAAAC,GACFJ,EAXD,CACHM,KAAM,YACNmB,MASsBrB,EAAII,WC0CnBkB,MAxGf,WAEI,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFtB,EAAQuB,aAA8C,SAAAC,GAAK,OAAIA,EAAMxB,SACrEL,EAAWC,cAEjBC,qBAAU,WACNF,EAASwB,KACV,IAIH,IAAMzC,EAAaD,uBAAY,SAAUR,EAAYG,GACjDuB,EHmFoB,SAACtB,EAAgBD,GAAjB,OAAwC,SAACuB,GACjE7B,EAAwBM,EAAYC,GAC/ByB,MAAK,SAAAC,GACFJ,EAjCgB,SAACtB,EAAgBD,GACzC,MAAO,CAAC6B,KAAM,cAAe5B,OAAQA,EAAQD,WAAYA,GAgCxCqD,CAAapD,EAAQD,QGtFzBsD,CAAazD,EAAIG,MAC3B,IAEGiC,EAAU5B,uBAAY,SAAU3C,EAAesC,GACjDuB,EHsFiB,SAACvB,EAAoBtC,GAArB,OAAuC,SAAC6D,GAC7D7B,EAAwBM,EAAYtC,GAC/BgE,MAAK,SAAAC,GACF,IAAIpB,EAAOoB,EAAII,KAAKA,KAAKwB,KACzBhC,EAtCa,SAAChB,GACtB,MAAO,CAACsB,KAAM,WAAYtB,QAqCTiD,CAAUjD,QG1FdkD,CAAUzD,EAAWtC,MAC/B,IAEGgG,EAAerD,uBAAY,SAAUR,EAAYqB,EAAsBlB,GACzEuB,EH0F0B,SAACtB,EAAgBD,EAAoBkB,GACnE,OAAO,SAACK,EAAoBoC,GAExB,IAEMpD,EAFoBoD,IAAW/B,MACa5B,GACb4D,MAAK,SAAAnB,GAAC,OAAIA,EAAE5C,KAAOI,KAIpDM,GACAb,EAAwBM,EAAYC,EAAQ,CACxCvC,MAAO6C,EAAK7C,MACZmG,UAAWtD,EAAKsD,UAChBC,SAAUvD,EAAKuD,SACfC,YAAaxD,EAAKwD,YAClBC,SAAUzD,EAAKyD,SACf9C,OAAQA,IACTQ,MAAK,WACJH,EAxDkB,SAACtB,EAAgBiB,EAAsBlB,GACrE,MAAO,CAAC6B,KAAM,qBAAsBX,SAAQlB,aAAYC,UAuDnCgE,CAAmBhE,EAAQiB,EAAQlB,QG5G3CkE,CAAmBrE,EAAIG,EAAYkB,MAC7C,IAEGF,EAAkBX,uBAAY,SAAUR,EAAYsE,EAAkBnE,GACxEuB,EH8GyB,SAACtB,EAAgBD,EAAoBtC,GAClE,OAAO,SAAC6D,EAAoBoC,GAExB,IAEMpD,EAFoBoD,IAAW/B,MACa5B,GACb4D,MAAK,SAAAnB,GAAC,OAAIA,EAAE5C,KAAOI,KAGpDM,GACAb,EAAwBM,EAAYC,EAAQ,CACxCvC,MAAOA,EACPmG,UAAWtD,EAAKsD,UAChBC,SAAUvD,EAAKuD,SACfC,YAAaxD,EAAKwD,YAClBC,SAAUzD,EAAKyD,SACf9C,OAAQX,EAAKW,SACdQ,MAAK,WACJH,EA5EiB,SAACtB,EAAgBvC,EAAesC,GAC7D,MAAO,CAAC6B,KAAM,oBAAqBnE,QAAOsC,aAAYC,UA2EjCmE,CAAkBnE,EAAOvC,EAAMsC,QG/HvCqE,CAAkBxE,EAAGG,EAAWmE,MAI1C,IAEG/B,EAAe/B,uBAAY,SAAUnC,EAAyB8B,GAChE,IAAMsE,EDcH,CAACzC,KAAM,yBAA0BhC,GCdEG,EDcMwC,OCdMtE,GAClDqD,EAAS+C,KACV,IAEG5B,EAAiBrC,uBAAY,SAAUR,GD+BjB,IAACG,EC9BzBuB,GD8ByBvB,EC9BCH,ED8BsB,SAAC0B,GACrD7B,EAA4BM,GACvB0B,MAAK,SAAAC,GACFJ,EAlCoB,SAACvB,GAC7B,MAAO,CAAC6B,KAAM,kBAAmBhC,GAAIG,GAiCpBuE,CAAiBvE,YC7B/B,IAEGkC,EAAsB7B,uBAAY,SAAUR,EAAYnC,GAC1D6D,EDsC6B,SAACvB,EAAoBtC,GACtD,OAAO,SAAC6D,EAAoBoC,GAEMA,IAAWT,UACKU,MAAK,SAAAnB,GAAC,OAAIA,EAAE5C,KAAOG,MAI7DN,EAA4BM,EAAYtC,GAAOgE,MAAK,WAChDH,EAjDqB,SAAC1B,EAAYnC,GAC9C,MAAO,CAACmE,KAAM,wBAAyBhC,GAAIA,EAAInC,MAAOA,GAgDjC8G,CAAsBxE,EAAWtC,QC/CzC+G,CAAsB5E,EAAInC,MAIpC,IAEGgH,EAAcrE,uBAAY,SAAC3C,GAC7B6D,EDwBqB,SAAC7D,GAAD,OAAmB,SAAC6D,GAC7C7B,EAA4BhC,GACvBgE,MAAK,SAAAC,GACFJ,EAtCD,CAACM,KAAM,eAAgB8C,SAsCChD,EAAII,KAAKA,KAAKwB,WC3BhCqB,CAAclH,MAIxB,CAAC6D,IAEJ,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC4D,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACrG,EAAA,EAAD,CAAYsG,KAAK,QAAQrG,MAAM,UAAU,aAAW,OAApD,SACI,cAACsG,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYjH,QAAQ,KAApB,kBAGA,cAAC6E,EAAA,EAAD,CAAQnE,MAAM,UAAd,wBAGR,eAACwG,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1C,MAAO,CAAC2C,QAAS,QAAjC,SACI,cAACpI,EAAD,CAAaW,QAAS4G,MAE1B,cAACW,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQtC,EAAUP,KAAI,SAAA8C,GACV,IAAIC,EAAmB9D,EAAM6D,EAAG5F,IAEhC,OAAO,cAACwF,EAAA,EAAD,CAAM9B,MAAI,EAAV,SACH,cAACoC,EAAA,EAAD,CAAO/C,MAAO,CAAC2C,QAAS,QAAxB,SACI,cAACjE,EAAD,CACIzB,GAAI4F,EAAG5F,GACPnC,MAAO+H,EAAG/H,MACVkE,MAAO8D,EACPpF,WAAYA,EACZ8B,aAAcA,EACdH,QAASA,EACTtB,iBAAkB+C,EAClBlB,OAAQiD,EAAGjD,OACXE,eAAgBA,EAChB1B,gBAAiBA,EACjBkB,oBAAqBA,OAbVuD,EAAG5F,gBCxGvC+F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpE,MAAK,YAAkD,IAA/CqE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCFRO,EAAcC,YAAgB,CAChCzE,MLoCwB,WAAgF,IAA/EwB,EAA8E,uDAAtD/B,EAAciD,EAAwC,uCACvG,OAAQA,EAAOzC,MACX,IAAK,cACD,IAAMyE,EAAS,eAAOlD,GAChBxB,EAAQ0E,EAAUhC,EAAOtE,YACzBuG,EAAW3E,EAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAE5C,KAAOyE,EAAOrE,UAEnD,OADAqG,EAAUhC,EAAOtE,YAAcuG,EACxBD,EAEX,IAAK,WACD,IAAMA,EAAS,eAAOlD,GAChBxB,EAAQ0E,EAAUhC,EAAO/D,KAAKiG,YAC9BD,EAAQ,CAAIjC,EAAO/D,MAAX,mBAAoBqB,IAElC,OADA0E,EAAUhC,EAAO/D,KAAKiG,YAAcD,EAC7BD,EAEX,IAAK,qBACD,IAAIG,EAAgBrD,EAAMkB,EAAOtE,YAC7B0G,EAAgBD,EACf9D,KAAI,SAAAF,GAAC,OAAIA,EAAE5C,KAAOyE,EAAOrE,OAAhB,2BAA6BwC,GAA7B,IAAgCvB,OAAQoD,EAAOpD,SAAUuB,KAGvE,OADAW,EAAMkB,EAAOtE,YAAc0G,EACpB,eAAKtD,GAEhB,IAAK,oBACD,IAAIqD,EAAgBrD,EAAMkB,EAAOtE,YAE7B0G,EAAgBD,EACf9D,KAAI,SAAAF,GAAC,OAAIA,EAAE5C,KAAOyE,EAAOrE,OAAhB,2BAA6BwC,GAA7B,IAAgC/E,MAAO4G,EAAO5G,QAAS+E,KAGrE,OADAW,EAAMkB,EAAOtE,YAAc0G,EACpB,eAAKtD,GAEhB,IAAK,eACD,OAAO,2BACAA,GADP,kBAEKkB,EAAOK,SAAS9E,GAAK,KAG9B,IAAK,kBACD,IAAM8G,EAAS,eAAOvD,GAEtB,cADOuD,EAAUrC,EAAOzE,IACjB8G,EAEX,IAAK,YACD,IAAML,EAAS,eAAOlD,GAItB,OAHAkB,EAAOtB,MAAM4D,SAAQ,SAACnB,GAClBa,EAAUb,EAAG5F,IAAM,MAEhByG,EAEX,IAAK,YACD,IAAMA,EAAS,eAAOlD,GAEtB,OADAkD,EAAUhC,EAAOtE,YAAcsE,EAAO1C,MAC/B0E,EAEX,QACI,OAAOlD,IK5FfF,UHiC4B,WAAsG,IAArGE,EAAoG,uDAAjE/B,EAAciD,EAAmD,uCACjI,OAAQA,EAAOzC,MACX,IAAK,kBACD,OAAOuB,EAAMZ,QAAO,SAAAiD,GAAE,OAAIA,EAAG5F,KAAOyE,EAAOzE,MAE/C,IAAK,eACD,IAAMgH,EAA+B,2BAAOvC,EAAOK,UAAd,IAAwBnC,OAAQ,QACrE,MAAM,CAAEqE,GAAR,mBAAwBzD,IAE5B,IAAK,wBACD,IAAMuB,EAAWvB,EAAMQ,MAAK,SAAA6B,GAAE,OAAIA,EAAG5F,KAAOyE,EAAOzE,MAInD,OAHI8E,IACAA,EAASjH,MAAQ4G,EAAO5G,OAErB,YAAI0F,GAEf,IAAK,yBACD,IAAMuB,EAAWvB,EAAMQ,MAAK,SAAA6B,GAAE,OAAIA,EAAG5F,KAAOyE,EAAOzE,MAInD,OAHI8E,IACAA,EAASnC,OAAS8B,EAAO9B,QAEtB,YAAIY,GAEf,IAAK,YACD,OAAOkB,EAAOtB,MAAML,KAAI,SAACF,GACrB,OAAO,2BAAIA,GAAX,IAAcD,OAAQ,WAG9B,QACI,OAAOY,MG3DN0D,EAAQC,YAAYX,EAAaY,YAAgBC,MAK9DC,OAAOJ,MAAQA,ECTfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5B3B,K","file":"static/js/main.035d09e3.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'cf750a83-7c21-4e27-915c-0dade0a73893'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType, SetTodosActionType,\r\n} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\n///Thunks\r\n\r\nexport const getTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            let task = res.data.data.item\r\n            dispatch(addTaskAC(task))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n\r\n        // const model = {...task, status} as UpdateTaskModelType\r\n\r\n        if (task) {\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            }).then(() => {\r\n                dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (taskId: string, todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        \r\n\r\n        if (task) {\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            }).then(() => {\r\n                dispatch(changeTaskTitleAC(taskId,title,todolistId))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType, todolistsAPI} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    },[])\r\n\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {changeTaskTitleAC, removeTaskAC} from \"./tasks-reducer\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: 'all'}\r\n            return [newTodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODOS\":{\r\n            return action.todos.map((t) => {\r\n                return {...t, filter: 'all'}\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\nexport type SetTodosActionType = ReturnType<typeof setTodos>\r\nexport const setTodos = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: 'SET-TODOS',\r\n        todos\r\n    } as const\r\n}\r\n\r\n//Thunks\r\n\r\nexport const getTodolistsThunk = (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodos(res.data))\r\n        })\r\n}\r\n\r\n//todo\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\n\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTodolistsFromState = getState().todolists;\r\n        const currentTodolist = allTodolistsFromState.find(t => t.id === todolistId)\r\n\r\n\r\n        if (currentTodolist) {\r\n            todolistsAPI.updateTodolist(todolistId, title).then(() => {\r\n                dispatch(changeTodolistTitleAC(todolistId,title))\r\n            })\r\n        }\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { Menu } from '@mui/icons-material';\r\nimport {\r\n    addTodolistAC, addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType, getTodolistsThunk,\r\n    removeTodolistAC, removeTodolistTC, setTodos,\r\n    TodolistDomainType, updateTodolistTitleTC\r\n} from './state/todolists-reducer'\r\nimport {\r\n    addTaskAC,\r\n    addTaskTC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n    removeTaskTC, updateTaskStatusTC, updateTaskTitleTC\r\n} from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsThunk)\r\n    }, [])\r\n\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId,title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(id, todolistId, status))\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id,todolistId,newTitle))\r\n\r\n        // const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        // dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n\r\n        // const action = removeTodolistAC(id);\r\n        // dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTodolistTitleTC(id, title))\r\n\r\n        // const action = changeTodolistTitleAC(id, title);\r\n        // dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n\r\n        // const action = addTodolistAC(title);\r\n        // dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}