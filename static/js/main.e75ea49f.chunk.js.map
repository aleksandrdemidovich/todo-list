{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","utils/formattingDate.ts","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsTC","createAsyncThunk","param","a","res","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","style","display","flexDirection","flexWrap","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","marginLeft","AddBox","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","taskStatus","Completed","textDecoration","opacity","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","New","onTitleChangeHandler","newValue","className","position","Checkbox","size","top","right","Delete","fontSize","formattingDate","date","dateObj","Date","day","getDate","month","getMonth","formattedDay","formattedMonth","getFullYear","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","elevation","padding","marginBottom","width","margin","paddingTop","justifyContent","addedDate","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","useSelector","addTodolistCallback","Grid","container","spacing","overflowX","allTodolistTasks","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","ErrorAlert","Alert","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","login","logout","setIsLoggedIn","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","setFieldError","field","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","type","FormControlLabel","control","authReducer","initializeApp","appReducer","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e75ea49f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'cf750a83-7c21-4e27-915c-0dade0a73893'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {appActions} from '../features/CommonActions/App'\r\nimport {Dispatch} from 'redux'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from '../api/types'\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err as AxiosError, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@mui/material'\r\nimport {AddBox} from '@mui/icons-material'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div style={{display:'flex', flexDirection:'row', flexWrap:'nowrap'}}>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\nimport {TaskStatuses} from \"../../api/types\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    taskStatus?: number\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span style={props.taskStatus === TaskStatuses.Completed ? {textDecoration: 'line-through', opacity: 0.6} : {}}\r\n                onDoubleClick={activateEditMode}>\r\n            {props.value}\r\n    </span>\r\n});\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@mui/material'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@mui/icons-material'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} taskStatus={props.task.status} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","export const formattingDate = (date: string) => {\r\n    const dateObj = new Date(date);\r\n    const day = dateObj.getDate();\r\n    const month = dateObj.getMonth() + 1;\r\n    const formattedDay = day < 10 ? `0${day}` : day;\r\n    const formattedMonth = month < 10 ? `0${month}` : month;\r\n    return `${formattedDay}.${formattedMonth}.${dateObj.getFullYear()}`;\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@mui/material'\r\nimport {Delete} from '@mui/icons-material'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\nimport {formattingDate} from \"../../../utils/formattingDate\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color:  \"secondary\" | \"success\" | \"inherit\" | \"warning\" | \"error\" | \"primary\" | \"info\",\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'contained' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper elevation={8} style={{padding: '10px', position: 'relative', marginBottom:'10px'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <p style={{fontSize: '14px', color: 'gray', width: '250px', margin: '10px auto'}}>\r\n                Todolist is empty. Click + button to add first task!\r\n            </p>}\r\n        </div>\r\n        <div style={{paddingTop: '10px', display: 'flex', justifyContent: 'space-between'}}>\r\n            {renderFilterButton('all', 'inherit', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'success', 'Completed')}\r\n        </div>\r\n        <div>\r\n            <p style={{margin: 0, fontSize: '14px', color: 'gray', display: 'flex', justifyContent: 'flex-end'}}>\r\n                Created: {formattingDate(props.todolist.addedDate)}\r\n            </p>\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid, Typography} from '@mui/material'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {tasksActions, todolistsActions} from './index'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC, addTodolistTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\nimport {Alert, AlertProps, Snackbar} from \"@mui/material\";\r\n\r\nfunction ErrorAlert(props: AlertProps) {\r\n    return <Alert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <ErrorAlert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </ErrorAlert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@mui/material'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={\"center\"}>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@mui/material'\r\nimport {Menu} from '@mui/icons-material'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../features/Application'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {authActions, Login} from '../features/Auth'\r\nimport {selectIsInitialized, selectStatus} from '../features/Application/selectors'\r\nimport {authSelectors} from '../features/Auth'\r\nimport {useActions} from '../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display:'flex', flexDirection:'row', justifyContent:'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        {isLoggedIn && 'Todolists'}\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                    <Route path=\"404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}