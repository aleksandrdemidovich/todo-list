{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","reducers/TaskReducer.ts","reducers/TodolistReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","charCode","size","className","Button","style","maxWidth","maxHeight","minWidth","minHeight","marginLeft","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","IconButton","removeTodolist","addTask","tasks","map","t","isDone","Checkbox","defaultChecked","color","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","filter","changeFilter","TaskReducer","state","action","type","todolistId","f","v1","newTitle","TodolistReducer","tl","App","todolistId1","todolistId2","useReducer","todolists","dispatchTodolists","dispatchTasks","RemoveTaskAC","AddTaskAC","changeStatus","ChangeTaskStatusAC","SetFilterAC","RemoveTodolistAC","ChangeTaskTitleAC","ChangeTodolistTitleAC","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","Container","fixed","Grid","container","padding","AddTodolistAC","spacing","allTodolistTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.91bbe890.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState(false)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField id=\"outlined-basic\" label=\"Enter title\" aria-errormessage={'Title required!'}\r\n                   variant=\"outlined\"\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error}\r\n                   size=\"small\"\r\n                   className={error ? \"error\" : \"\"}\r\n        />\r\n\r\n        {/*<input value={title}*/}\r\n        {/*       onChange={onChangeHandler}*/}\r\n        {/*       onKeyPress={onKeyPressHandler}*/}\r\n        {/*       className={error ? \"error\" : \"\"}*/}\r\n        {/*/>*/}\r\n      {/*<button onClick={addItem}>+</button>*/}\r\n\r\n        <Button variant=\"contained\"\r\n                style={{maxWidth: '39px', maxHeight: '70px', minWidth: '39px', minHeight: '39px', marginLeft:'5px'}}\r\n                onClick={addItem}>+\r\n        </Button>\r\n\r\n        {/*{error && <div className=\"error-message\">Title is required</div>}*/}\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------------------------\r\n\r\n// import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n// import {Button, TextField} from \"@material-ui/core\";\r\n//\r\n// type AddItemFormPropsType = {\r\n//     addItem: (title: string) => void\r\n// }\r\n//\r\n// export function AddItemForm(props: AddItemFormPropsType) {\r\n//\r\n//     let [title, setTitle] = useState(\"\")\r\n//     let [error, setError] = useState<string | null>(null)\r\n//\r\n//     const addItem = () => {\r\n//         if (title.trim() !== \"\") {\r\n//             props.addItem(title);\r\n//             setTitle(\"\");\r\n//         } else {\r\n//             setError(\"Title is required\");\r\n//         }\r\n//     }\r\n//\r\n//     const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         setTitle(e.currentTarget.value)\r\n//     }\r\n//\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         setError(null);\r\n//         if (e.charCode === 13) {\r\n//             addItem();\r\n//         }\r\n//     }\r\n//\r\n//     return <div>\r\n//         <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\"\r\n//                    value={title}\r\n//                    onChange={onChangeHandler}\r\n//                    onKeyPress={onKeyPressHandler}\r\n//                    size=\"small\"\r\n//                    className={error ? \"error\" : \"\"}\r\n//         />\r\n//\r\n//         {/*<input value={title}*/}\r\n//         {/*       onChange={onChangeHandler}*/}\r\n//         {/*       onKeyPress={onKeyPressHandler}*/}\r\n//         {/*       className={error ? \"error\" : \"\"}*/}\r\n//         {/*/>*/}\r\n//         {/*<button onClick={addItem}>+</button>*/}\r\n//\r\n//         <Button variant=\"contained\"\r\n//                 style={{maxWidth: '37px', maxHeight: '70px', minWidth: '37px', minHeight: '37px'}}\r\n//                 onClick={addItem}>+\r\n//         </Button>\r\n//\r\n//         {error && <div className=\"error-message\">{error}</div>}\r\n//     </div>\r\n// }\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, Checkbox} from \"@mui/material\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            {/*<button onClick={removeTodolist}>x</button>*/}\r\n            <IconButton aria-label=\"delete\">\r\n                <DeleteIcon onClick={removeTodolist}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ol>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox defaultChecked color={\"success\"} onChange={onChangeHandler} checked={t.isDone} />\r\n                        {/*<input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                      {/*<button onClick={onClickHandler}>x</button>*/}\r\n                        <IconButton aria-label=\"delete\">\r\n                            <DeleteIcon onClick={onClickHandler}/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ol>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ?\"contained\": \"outlined\"} size=\"small\"  onClick={onAllClickHandler}>All</Button>\r\n            <Button variant={props.filter === 'active' ?\"contained\": \"outlined\"} color=\"secondary\" size=\"small\"  onClick={onActiveClickHandler}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ?\"contained\": \"outlined\"}  color=\"success\" size=\"small\" onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n            {/*<button className={props.filter === 'all' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onAllClickHandler}>All*/}\r\n            {/*</button>*/}\r\n            {/*<button className={props.filter === 'active' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onActiveClickHandler}>Active*/}\r\n            {/*</button>*/}\r\n            {/*<button className={props.filter === 'completed' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onCompletedClickHandler}>Completed*/}\r\n            {/*</button>*/}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {TasksStateType } from \"../App\";\r\n\r\nexport const TaskReducer = (state: TasksStateType, action: ActionsType) => {\r\n    switch (action.type){\r\n        case 'REMOVE-TASK':{\r\n            return ({...state, [action.todolistId]: state[action.todolistId].filter(f => f.id !== action.id)})\r\n        }\r\n        case 'ADD-TASK':{\r\n            return ({...state, [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]})\r\n        }\r\n        case 'CHANGE-TASK-STATUS':{\r\n            return ({...state, [action.todolistId]: state[action.todolistId].map(f => f.id === action.id ? {...f, isDone: action.isDone} : f)})\r\n        }\r\n        case 'CHANGE-TASK-TITLE':{\r\n            return ({...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.id ? {...t, title: action.newTitle   } : t)})\r\n        }\r\n        case \"ADD-TODOLIST\":{\r\n            let todolistId = action.todolistId;\r\n            return { ...state, [todolistId]: [] }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type ActionsType = RemoveTaskACType | AddTaskACType | ChangeTaskStatusACType | ChangeTaskTitleACType | AddTodolistACType\r\n\r\nexport type  RemoveTaskACType = ReturnType<typeof RemoveTaskAC>\r\nexport const RemoveTaskAC = (id: string, todolistId: string) => {\r\n    return{\r\n        type: 'REMOVE-TASK',\r\n        id, todolistId\r\n    } as const\r\n}\r\n\r\nexport type  AddTaskACType = ReturnType<typeof AddTaskAC>\r\nexport const AddTaskAC = (title: string, todolistId: string) => {\r\n    return{\r\n        type: 'ADD-TASK',\r\n        title, todolistId\r\n    } as const\r\n}\r\n\r\nexport type  ChangeTaskStatusACType = ReturnType<typeof ChangeTaskStatusAC>\r\nexport const ChangeTaskStatusAC = (id: string, isDone: boolean, todolistId: string) => {\r\n    return{\r\n        type: 'CHANGE-TASK-STATUS',\r\n        id, isDone, todolistId\r\n    } as const\r\n}\r\n\r\nexport type  ChangeTaskTitleACType = ReturnType<typeof ChangeTaskTitleAC>\r\nexport const ChangeTaskTitleAC = (id: string, newTitle: string, todolistId: string) => {\r\n    return{\r\n        type: 'CHANGE-TASK-TITLE',\r\n        id, newTitle, todolistId\r\n    } as const\r\n}\r\n\r\nexport type  AddTodolistACType = ReturnType<typeof AddTodolistAC>\r\nexport const AddTodolistAC = (title: string, todolistId: string) => {\r\n    return{\r\n        type: 'ADD-TODOLIST',\r\n        title, todolistId\r\n    } as const\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {FilterValuesType, TodolistType} from \"../App\";\r\n\r\nexport const TodolistReducer = (state: Array<TodolistType>, action: ActionsType) => {\r\n    switch (action.type){\r\n        case 'REMOVE-TODOLIST':{\r\n            return state.filter(f => f.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST':{\r\n            const newTodolist: TodolistType = {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n            }\r\n            return [newTodolist, ...state]\r\n\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE':{\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.newTitle} : tl)\r\n\r\n        }\r\n        case 'SET-FILTER': {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.value} : tl);\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type ActionsType = RemoveTodolistACType | AddTodolistACType | ChangeTodolistTitleACType | SetFilterACACType\r\n\r\nexport type  RemoveTodolistACType = ReturnType<typeof RemoveTodolistAC>\r\nexport const RemoveTodolistAC = (id: string) => {\r\n    return{\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    } as const\r\n}\r\n\r\nexport type  AddTodolistACType = ReturnType<typeof AddTodolistAC>\r\nexport const AddTodolistAC = (title: string, todolistId: string) => {\r\n    return{\r\n        type: 'ADD-TODOLIST',\r\n        title, todolistId\r\n    } as const\r\n}\r\n\r\nexport type  ChangeTodolistTitleACType = ReturnType<typeof ChangeTodolistTitleAC>\r\nexport const ChangeTodolistTitleAC = (newTitle: string, todolistId: string) => {\r\n    return{\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        newTitle, todolistId\r\n    } as const\r\n}\r\n\r\nexport type  SetFilterACACType = ReturnType<typeof SetFilterAC>\r\nexport const SetFilterAC = (value: FilterValuesType, todolistId: string) => {\r\n    return{\r\n        type: 'SET-FILTER',\r\n        value, todolistId\r\n    } as const\r\n}\r\n\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC, TaskReducer} from \"./reducers/TaskReducer\";\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n    SetFilterAC,\r\n    TodolistReducer\r\n} from \"./reducers/TodolistReducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n\r\n    let [todolists, dispatchTodolists] = useReducer(TodolistReducer,[\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, dispatchTasks] = useReducer(TaskReducer,{\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        dispatchTasks(RemoveTaskAC(id,todolistId))\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].filter(f => f.id !== id)})\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        dispatchTasks(AddTaskAC(title,todolistId))\r\n        // setTasks({...tasks, [todolistId]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistId]]})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        dispatchTasks(ChangeTaskStatusAC(id,isDone,todolistId))\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].map(f => f.id === id ? {...f, isDone: isDone} : f)})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatchTodolists(SetFilterAC(value, todolistId))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        dispatchTodolists(RemoveTodolistAC(id))\r\n        // setTodolists(todolists.filter(f => f.id !== id))\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = AddTodolistAC(title, v1())\r\n        dispatchTodolists(action)\r\n        dispatchTasks(action)\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        dispatchTasks(ChangeTaskTitleAC(id,newTitle,todolistId))\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].map(t => t.id === id ? {...t, title: newTitle} : t)})\r\n    }\r\n\r\n    function changeTodolistTitle(todolistId: string, newTitle: string, ) {\r\n        dispatchTodolists(ChangeTodolistTitleAC(newTitle,todolistId))\r\n        // setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, title: newTitle} : tl))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            Todolists\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Container fixed>\r\n                <Grid container style={{padding:'20px'}}><AddItemForm addItem={addTodolist}/></Grid>\r\n                <Grid container spacing={3}>  {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                        }\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}