{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","ResultCodes","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","addTaskTC","res","data","resultCode","success","task","item","messages","length","handleServerAppError","catch","err","updateTaskTC","domainModel","getState","tasks","find","t","apiModel","deadline","description","priority","startDate","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHAqDYA,EAOAC,E,iCC9CGC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wCDPRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,K,SAmBlI1B,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEzDZ,ICqEK0B,EDrECC,EAAe,CACjBC,OAAQ,OACRC,MAAO,MAoBEC,EAAiB,SAACF,GAAD,MACzB,CAACG,KAAM,iBAAkBH,WAGjBI,EAAgB,SAACH,GAAD,MACxB,CAACE,KAAM,gBAAiBF,UEhBhBI,EAA2B,SAACJ,EAA0BK,GAC/DA,EAASF,EAAcH,EAAMM,UAC7BD,EAASJ,EAAe,YCJtBH,EAA0C,G,OFJ1CA,EAA+B,I,SAgEhCD,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KAME,IAAMU,EAAY,SAAClB,EAAeK,GAAhB,OAAuC,SAACW,GAC7DA,EAASJ,EAAe,YACxBd,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAAiC,GACEA,EAAIC,KAAKC,aAAeb,EAAYc,SACpCN,EArCX,CAACH,KAAM,WAAYU,KAqCWJ,EAAIC,KAAKA,KAAKI,OACjCR,EAASJ,EAAe,gBAEpBO,EAAIC,KAAKK,SAASC,OAClBV,EAASF,EAAcK,EAAIC,KAAKK,SAAS,KClFzB,SAAIL,EAAuBJ,GACvDI,EAAKK,SAASC,OACdV,EAASF,EAAcM,EAAKK,SAAS,KAErCT,EAASF,EAAc,wBAE3BE,EAASJ,EAAe,WD8ERe,CAAqBR,EAAIC,KAAMJ,GAGnCA,EAASJ,EAAe,eAG/BgB,OAAM,SAACC,GACJd,EAAyBc,EAAKb,QAK7Bc,EAAe,SAACxB,EAAgByB,EAAwC1B,GAAzD,OACxB,SAACW,EAAiCgB,GAC9B,IACMT,EADQS,IACKC,MAAM5B,GAAY6B,MAAK,SAAAC,GAAC,OAAIA,EAAEjC,KAAOI,KACxD,GAAKiB,EAAL,CAMA,IAAMa,EAA6B,aAC/BC,SAAUd,EAAKc,SACfC,YAAaf,EAAKe,YAClBC,SAAUhB,EAAKgB,SACfC,UAAWjB,EAAKiB,UAChBxC,MAAOuB,EAAKvB,MACZU,OAAQa,EAAKb,QACVqB,GAGPf,EAASJ,EAAe,YAExBd,EAAwBO,EAAYC,EAAQ8B,GACvClD,MAAK,SAAAiC,GACF,IAAMsB,EA9EM,SAACnC,EAAgBC,EAAkCF,GAAnD,MACvB,CAACQ,KAAM,cAAeN,QAAOF,aAAYC,UA6EfoC,CAAapC,EAAQyB,EAAa1B,GACjDW,EAASyB,GACTzB,EAASJ,EAAe,iBAE3BgB,OAAM,SAAAC,GACHd,EAAyBc,EAAKb,WAvBlC2B,QAAQC,KAAK,iC,0CGhGZC,EAAcC,IAAMC,MAAK,SAAUC,GAC5CL,QAAQM,IAAI,sBAEZ,MAAwBC,mBAAS,IAAjC,mBAAKlD,EAAL,KAAYmD,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,mBAAKvC,EAAL,KAAYyC,EAAZ,KAEMC,EAAU,WACS,KAAjBrD,EAAMsD,QACNN,EAAMK,QAAQrD,GACdmD,EAAS,KAETC,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACR7C,QAASA,EACT8C,MAAOzD,EACP0D,SAjBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVhD,GACAyC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYrD,EACZsD,SAAUjB,EAAMiB,WAE3B,cAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASf,EAASY,SAAUjB,EAAMiB,SAA9D,SACI,cAACI,EAAA,EAAD,YCzCCC,EAAexB,IAAMC,MAAK,SAAUC,GAC7CL,QAAQM,IAAI,uBACZ,MAA8BC,oBAAS,GAAvC,mBAAKqB,EAAL,KAAeC,EAAf,KACA,EAAwBtB,mBAASF,EAAMS,OAAvC,mBAAKzD,EAAL,KAAYmD,EAAZ,KAcA,OAAOoB,EACD,cAAChB,EAAA,EAAD,CAAWE,MAAOzD,EAAO0D,SALX,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAIyBgB,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZxB,EAAMU,SAAS1D,MAQb,sBAAM2E,cAda,WACrBH,GAAY,GACZrB,EAASH,EAAMS,QAYb,SAAwCT,EAAMS,W,kBCb3CmB,EAAO9B,IAAMC,MAAK,SAACC,GAC5B,IAAM6B,EAAiBC,uBAAY,kBAAM9B,EAAM+B,WAAW/B,EAAMzB,KAAKrB,GAAI8C,EAAM3C,cAAa,CAAC2C,EAAMzB,KAAKrB,GAAI8C,EAAM3C,aAE5G2E,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrClC,EAAMmC,iBAAiBnC,EAAMzB,KAAKrB,GAAI+E,EAAiBpG,EAAauG,UAAYvG,EAAawG,IAAKrC,EAAM3C,cACzG,CAAC2C,EAAMzB,KAAKrB,GAAI8C,EAAM3C,aAEnBiF,EAAuBR,uBAAY,SAACS,GACtCvC,EAAMwC,gBAAgBxC,EAAMzB,KAAKrB,GAAIqF,EAAUvC,EAAM3C,cACtD,CAAC2C,EAAMzB,KAAKrB,GAAI8C,EAAM3C,aAEzB,OAAO,sBAAyBoF,UAAWzC,EAAMzB,KAAKb,SAAW7B,EAAauG,UAAY,UAAY,GAA/F,UACH,cAACM,EAAA,EAAD,CACIR,QAASlC,EAAMzB,KAAKb,SAAW7B,EAAauG,UAC5CjB,MAAM,UACNT,SAAUsB,IAGd,cAACV,EAAD,CAAcb,MAAOT,EAAMzB,KAAKvB,MAAO0D,SAAU4B,IACjD,cAACpB,EAAA,EAAD,CAAYE,QAASS,EAArB,SACI,cAACc,EAAA,EAAD,QATS3C,EAAMzB,KAAKrB,O,SCEnB0F,EAAW9C,IAAMC,MAAK,SAAUC,GACzCL,QAAQM,IAAI,mBAEZ,IAAMjC,EAAW6E,cACjBC,qBAAU,WACN,INmBqBzF,EMnBf0F,GNmBe1F,EMnBM2C,EAAM9C,GNmBW,SAACc,GACjDlB,EAAsBO,GACjBnB,MAAK,SAACiC,GACH,IAAMc,EAAQd,EAAIC,KAAK4E,MACvBhF,EARc,SAACiB,EAAwB5B,GAAzB,MACrB,CAACQ,KAAM,YAAaoB,QAAO5B,cAOX4F,CAAWhE,EAAO5B,SMtB/BW,EAAS+E,KACV,IAEH,IAAMG,EAAUpB,uBAAY,SAAC9E,GACzBgD,EAAMkD,QAAQlG,EAAOgD,EAAM9C,MAC5B,CAAC8C,EAAMkD,QAASlD,EAAM9C,KAKnBiG,EAAsBrB,uBAAY,SAAC9E,GACrCgD,EAAMmD,oBAAoBnD,EAAM9C,GAAIF,KACrC,CAACgD,EAAM9C,GAAI8C,EAAMmD,sBAEdC,EAAoBtB,uBAAY,kBAAM9B,EAAMqD,aAAa,MAAOrD,EAAM9C,MAAK,CAAC8C,EAAM9C,GAAI8C,EAAMqD,eAC5FC,EAAuBxB,uBAAY,kBAAM9B,EAAMqD,aAAa,SAAUrD,EAAM9C,MAAK,CAAC8C,EAAM9C,GAAI8C,EAAMqD,eAClGE,EAA0BzB,uBAAY,kBAAM9B,EAAMqD,aAAa,YAAarD,EAAM9C,MAAK,CAAC8C,EAAM9C,GAAI8C,EAAMqD,eAG1GG,EAAmBxD,EAAMf,MAS7B,MAPqB,WAAjBe,EAAMyD,SACND,EAAmBxD,EAAMf,MAAMwE,QAAO,SAAAtE,GAAC,OAAIA,EAAEzB,SAAW7B,EAAawG,QAEpD,cAAjBrC,EAAMyD,SACND,EAAmBxD,EAAMf,MAAMwE,QAAO,SAAAtE,GAAC,OAAIA,EAAEzB,SAAW7B,EAAauG,cAGlE,gCACH,+BAAI,cAACd,EAAD,CAAcb,MAAOT,EAAMhD,MAAO0D,SAAUyC,IAC5C,cAACjC,EAAA,EAAD,CAAYE,QAvBG,WACnBpB,EAAM0D,eAAe1D,EAAM9C,KAsBc+D,SAAiC,YAAvBjB,EAAM2D,aAArD,SACI,cAAChB,EAAA,EAAD,SAGR,cAAC9C,EAAD,CAAaQ,QAAS6C,EAASjC,SAAiC,YAAvBjB,EAAM2D,eAC/C,8BAEQH,EAAiBI,KAAI,SAAAzE,GAAC,OAAI,cAACyC,EAAD,CAAiBrD,KAAMY,EAAG9B,WAAY2C,EAAM9C,GACtC6E,WAAY/B,EAAM+B,WAClBS,gBAAiBxC,EAAMwC,gBACvBL,iBAAkBnC,EAAMmC,kBAHnBhD,EAAEjC,SAO/C,sBAAK2G,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQvD,QAA0B,QAAjBR,EAAMyD,OAAmB,WAAa,OAC/CrC,QAASgC,EACTjC,MAAO,UAFf,iBAKA,cAAC4C,EAAA,EAAD,CAAQvD,QAA0B,WAAjBR,EAAMyD,OAAsB,WAAa,OAClDrC,QAASkC,EACTnC,MAAO,UAFf,oBAIA,cAAC4C,EAAA,EAAD,CAAQvD,QAA0B,cAAjBR,EAAMyD,OAAyB,WAAa,OACrDrC,QAASmC,EACTpC,MAAO,YAFf,gC,kBCrEC6C,EAA0B,WAEnC,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFhF,EAAQiF,aAA8C,SAAAC,GAAK,OAAIA,EAAMlF,SAErEjB,EAAW6E,cAEjBC,qBAAU,WACN,IAAMC,ELoBH,SAAC/E,GACJA,EAASJ,EAAe,YACxBd,IACKZ,MAAK,SAACiC,GACHH,EAZmD,CAACH,KAAM,gBAAiBoG,UAYnD9F,EAAIC,OAC5BJ,EAASJ,EAAe,iBAE3BgB,OAAM,SAAAC,GACHd,EAAyBc,EAAKb,OK3BtCA,EAAS+E,KACV,IAEH,IAAMhB,EAAaD,uBAAY,SAAU5E,EAAYG,GACjD,IAAM0F,EP2Bc,SAACzF,EAAgBD,GAAjB,OAAwC,SAACW,GACjEA,EAASJ,EAAe,YACxBd,EAAwBO,EAAYC,GAC/BpB,MAAK,SAAAiC,GACFH,EArBgB,SAACV,EAAgBD,GAAjB,MACvB,CAACQ,KAAM,cAAeP,SAAQD,cAoBd+G,CAAa9G,EAAQD,IAC9BW,EAASJ,EAAe,iBAE3BgB,OAAM,SAAAC,GACHd,EAAyBc,EAAKb,OOnCpBqG,CAAanH,EAAIG,GAC/BW,EAAS+E,KACV,IAEGG,EAAUpB,uBAAY,SAAU9E,EAAeK,GACjD,IAAM0F,EAAQ7E,EAAUlB,EAAOK,GAC/BW,EAAS+E,KACV,IAEGuB,EAAexC,uBAAY,SAAU5E,EAAYQ,EAAsBL,GACzE,IAAM0F,EAAQjE,EAAa5B,EAAI,CAACQ,UAASL,GACzCW,EAAS+E,KACV,IAEGP,EAAkBV,uBAAY,SAAU5E,EAAYqH,EAAkBlH,GACxE,IAAM0F,EAAQjE,EAAa5B,EAAI,CAACF,MAAOuH,GAAWlH,GAClDW,EAAS+E,KACV,IAEGM,EAAevB,uBAAY,SAAUrB,EAAyBpD,GAChE,IAAMoC,ELdT,CAAC5B,KAAM,yBAA0BX,GKcQG,ELdJoG,OKcgBhD,GAClDzC,EAASyB,KACV,IAEGiE,EAAiB5B,uBAAY,SAAU5E,GACzC,ILEyBG,EKFnB0F,GLEmB1F,EKFMH,ELG5B,SAACc,GACJA,EApBH,CAACH,KAAM,gCAAiCX,GAoBCG,EApBGsG,aAoBS,YAClD3F,EAASJ,EAAe,YACxBd,EAA4BO,GACvBnB,MAAK,SAACiC,GACyB,IAAxBA,EAAIC,KAAKC,YACTL,EAjCY,SAACd,GAAD,MAAiB,CAACW,KAAM,kBAAmBX,MAiC9CsH,CAAiBnH,IAC1BW,EAASJ,EAAe,gBAEpBO,EAAIC,KAAKK,SAASC,OAClBV,EAASF,EAAcK,EAAIC,KAAKK,SAAS,KAEzCT,EAASF,EAAc,wBAE3BE,EAASJ,EAAe,eAG/BgB,OAAM,SAAAC,GACHd,EAAyBc,EAAKb,QKpBtCA,EAAS+E,KACV,IAEGI,EAAsBrB,uBAAY,SAAU5E,EAAYF,GAC1D,IAAM+F,EL2CuB,SAAC7F,EAAYF,GAC9C,OAAO,SAACgB,GACJA,EAASJ,EAAe,YACxBd,EAA4BI,EAAIF,GAC3Bd,MAAK,SAACiC,GACHH,EA3EqB,SAACd,EAAYF,GAAb,MAChC,CAACa,KAAM,wBAAyBX,KAAIF,SA0EhByH,CAAsBvH,EAAIF,IACnCgB,EAASJ,EAAe,iBAE3BgB,OAAM,SAAAC,GACHd,EAAyBc,EAAKb,OKpDxB0G,CAAsBxH,EAAIF,GACxCgB,EAAS+E,KACV,IAEG4B,EAAc7C,uBAAY,SAAC9E,GAC7B,IAAM+F,ELee,SAAC/F,GAC1B,OAAO,SAACgB,GACJA,EAASJ,EAAe,YACxBd,EAA4BE,GACvBd,MAAK,SAAAiC,GAC0B,IAAxBA,EAAIC,KAAKC,YACTL,EAtDsC,CAACH,KAAM,eAAgB+G,SAsDtCzG,EAAIC,KAAKA,KAAKI,OACrCR,EAASJ,EAAe,gBAEpBO,EAAIC,KAAKK,SAASC,OAClBV,EAASF,EAAcK,EAAIC,KAAKK,SAAS,KAEzCT,EAASF,EAAc,wBAE3BE,EAASJ,EAAe,eAG/BgB,OAAM,SAACC,GACJd,EAAyBc,EAAKb,OKjCxB6G,CAAc7H,GAC5BgB,EAAS+E,KACV,CAAC/E,IAGJ,OAAO,qCACH,cAAC8G,EAAA,EAAD,CAAMC,WAAS,EAAClB,MAAO,CAACmB,QAAS,QAAjC,SACI,cAACnF,EAAD,CAAaQ,QAASsE,MAE1B,cAACG,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQhB,EAAUL,KAAI,SAAAsB,GACV,IAAIC,EAAmBlG,EAAMiG,EAAGhI,IAEhC,OAAO,cAAC4H,EAAA,EAAD,CAAMtG,MAAI,EAAV,SACH,cAAC4G,EAAA,EAAD,CAAOvB,MAAO,CAACmB,QAAS,QAAxB,SACI,cAACpC,EAAD,CACI1F,GAAIgI,EAAGhI,GACPF,MAAOkI,EAAGlI,MACVyG,OAAQyB,EAAGzB,OACXE,aAAgBuB,EAAGvB,aACnB1E,MAAOkG,EACPpD,WAAYA,EACZsB,aAAcA,EACdH,QAASA,EACTf,iBAAkBmC,EAClBZ,eAAgBA,EAChBlB,gBAAiBA,EACjBW,oBAAqBA,OAdV+B,EAAGhI,a,yEC3ExCmI,GAAQvF,IAAMwF,YAAuC,SACvDtF,EAAOuF,GACP,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAK/E,QAAQ,UAAaR,OAG3D,SAASyF,KAGZ,IAAM9H,EAAQuG,aAA6C,SAAAC,GAAK,OAAIA,EAAMuB,IAAI/H,SACxEK,EAAW6E,cAEX8C,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ7H,EAASF,EAAc,QAI3B,OACI,cAACgI,GAAA,EAAD,CAAUC,KAAgB,OAAVpI,EAAgBqI,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKzI,MCoBF0I,OA5Bf,WAEI,IAAM3I,EAASwG,aAAiD,SAACC,GAAD,OAAWA,EAAMuB,IAAIhI,UAErF,OACI,sBAAK+E,UAAU,MAAf,UACI,cAACgD,GAAD,IACA,cAACa,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACtF,EAAA,EAAD,CAAYuF,KAAK,QAAQtF,MAAM,UAAU,aAAW,OAApD,SACI,cAACuF,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYnG,QAAQ,KAApB,kBAGA,cAACuD,EAAA,EAAD,CAAQ5C,MAAM,UAAd,wBAIK,YAAXzD,GAAuB,cAACkJ,EAAA,EAAD,CAAgBzF,MAAM,cAE/C,cAAC0F,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACK,cAAC,EAAD,U,kBCnCXC,GAAcC,aAAgB,CAChC/H,MVCwB,WAAgF,IAA/EkF,EAA8E,uDAAtD1G,EAAcgC,EAAwC,uCACvG,OAAQA,EAAO5B,MACX,IAAK,cACD,OAAO,2BAAIsG,GAAX,kBAAmB1E,EAAOpC,WAAa8G,EAAM1E,EAAOpC,YAAYoG,QAAO,SAAAtE,GAAC,OAAIA,EAAEjC,KAAOuC,EAAOnC,YAChG,IAAK,WACD,OAAO,2BAAI6G,GAAX,kBAAmB1E,EAAOlB,KAAK0I,WAA/B,CAA6CxH,EAAOlB,MAApD,mBAA6D4F,EAAM1E,EAAOlB,KAAK0I,gBACnF,IAAK,cACD,OAAO,2BACA9C,GADP,kBAEK1E,EAAOpC,WAAa8G,EAAM1E,EAAOpC,YAC7BuG,KAAI,SAAAzE,GAAC,OAAIA,EAAEjC,KAAOuC,EAAOnC,OAAhB,2BAA6B6B,GAAMM,EAAOlC,OAAS4B,OAEzE,IAAK,eACD,OAAO,2BAAIgF,GAAX,kBAAmB1E,EAAOmF,SAAS1H,GAAK,KAC5C,IAAK,kBACD,IAAMgK,EAAS,eAAO/C,GAEtB,cADO+C,EAAUzH,EAAOvC,IACjBgK,EACX,IAAK,gBACD,IAAMA,EAAS,eAAO/C,GAItB,OAHA1E,EAAOwE,UAAUkD,SAAQ,SAAAjC,GACrBgC,EAAUhC,EAAGhI,IAAM,MAEhBgK,EAEX,IAAK,YACD,OAAO,2BAAI/C,GAAX,kBAAmB1E,EAAOpC,WAAaoC,EAAOR,QAClD,QACI,OAAOkF,IU5BfF,URI4B,WAAsG,IAArGE,EAAoG,uDAAjE1G,EAAcgC,EAAmD,uCACjI,OAAQA,EAAO5B,MACX,IAAK,kBACD,OAAOsG,EAAMV,QAAO,SAAAyB,GAAE,OAAIA,EAAGhI,KAAOuC,EAAOvC,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAYuC,EAAOmF,UAAnB,IAA6BnB,OAAQ,MAAOE,aAAc,UAA1D,mBAAsEQ,IAC1E,IAAK,wBACD,OAAOA,EAAMP,KAAI,SAAAsB,GAAE,OAAIA,EAAGhI,KAAOuC,EAAOvC,GAAjB,2BAA0BgI,GAA1B,IAA8BlI,MAAOyC,EAAOzC,QAASkI,KAChF,IAAK,yBACD,OAAOf,EAAMP,KAAI,SAAAsB,GAAE,OAAIA,EAAGhI,KAAOuC,EAAOvC,GAAjB,2BAA0BgI,GAA1B,IAA8BzB,OAAQhE,EAAOgE,SAAUyB,KAClF,IAAK,gBACD,OAAOzF,EAAOwE,UAAUL,KAAI,SAAAsB,GAAE,kCAASA,GAAT,IAAazB,OAAQ,MAAOE,aAAc,YAC5E,IAAK,gCACD,OAAOQ,EAAMP,KAAI,SAAAsB,GAAE,OAAIA,EAAGhI,KAAOuC,EAAOvC,GAAjB,2BAA0BgI,GAA1B,IAA8BvB,aAAclE,EAAOkE,eAAgBuB,KAC9F,QACI,OAAOf,IQlBfuB,IXDsB,WAAoF,IAAnFvB,EAAkF,uDAAxD1G,EAAcgC,EAA0C,uCACzG,OAAQA,EAAO5B,MACX,IAAK,iBACD,OAAO,2BAAIsG,GAAX,IAAkBzG,OAAQ+B,EAAO/B,SACrC,IAAK,gBACD,OAAO,2BAAIyG,GAAX,IAAkBxG,MAAO8B,EAAO9B,QACpC,QACI,OAAOwG,MWHNiD,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DC,OAAOJ,MAAQA,GCZfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRQ,SAASC,eAAe,SAM5B9L,K","file":"static/js/main.f89f0058.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'cf750a83-7c21-4e27-915c-0dade0a73893'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType\r\n\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'APP/SET-ERROR', error} as const)\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nenum ResultCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResultCodes.success) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    // dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType\r\n","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorActionType | setAppStatusActionType>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    setAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC  = (id: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\r\n\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus = {tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        // setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport { Menu } from '@mui/icons-material';\r\nimport LinearProgress from '@mui/material/LinearProgress/LinearProgress';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            { status === 'loading' &&<LinearProgress color=\"secondary\" />}\r\n\r\n            <Container fixed>\r\n                 <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}